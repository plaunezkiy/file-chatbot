{"docstore/metadata": {"ce09a48c-33e1-4c52-9e4d-ed253819c436": {"doc_hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "c0e9dd9b-5b9a-4aa1-a3e6-34ab682c698c": {"doc_hash": "257ca7d79812d98f331d6fb2903d8ee5389a0b3a2d3fc07fba12acaa9ce6ffcf", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}, "30be1d79-6a60-447a-b3d1-af4a08b29dc3": {"doc_hash": "0155725fe71eb5af212eda4254c1597295fe867c031161b2b918ba70ba27a485", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}, "e448afc4-a9bb-449b-ac40-15ca87d1461e": {"doc_hash": "8894199af67b8699f87031ed018f403aaa15a29625c19690cfc9f190289c3997", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}, "0ec41b7b-6c46-4c2d-8d8b-25f28cb5d6eb": {"doc_hash": "7133eb2f12ad5d21019aa6da57be47ba0a28b65529158156fceddb8cbc48918b", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}, "bcfb2d59-c9cd-4c9e-9e57-919f14f8636e": {"doc_hash": "94bf22cb3b5f77b2dcf4825502a70b8f4fccf3e504907370ed094fa37e7a2116", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}, "fdb51100-ca49-4c60-bc71-82606ebc5c70": {"doc_hash": "99231a91abd49f819ac737f68a584cebb63eb921176d1b2fc0d3260e554cef29", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}, "aa142d03-daca-497e-ad22-14fcb2d620c7": {"doc_hash": "f9601f128f6dba51b8a74795b5db897afcef1ef22332065d30f9314db05898b8", "ref_doc_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436"}}, "docstore/data": {"c0e9dd9b-5b9a-4aa1-a3e6-34ab682c698c": {"__data__": {"id_": "c0e9dd9b-5b9a-4aa1-a3e6-34ab682c698c", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "3": {"node_id": "30be1d79-6a60-447a-b3d1-af4a08b29dc3", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "0155725fe71eb5af212eda4254c1597295fe867c031161b2b918ba70ba27a485"}}, "hash": "257ca7d79812d98f331d6fb2903d8ee5389a0b3a2d3fc07fba12acaa9ce6ffcf", "text": "Algorithms\n\n\to (little o), \u03c9 (little omega)\n\t\tWhat is the purpose of asymptotic analysis?\n\t\t\tIt is a way of making precise, quantitative statements about efficiency properties of algorithms themselves.\n\n\t\tWhat does one refer to when a function is labelled as \u201casymptotically smaller/larger\u201d than another?\n\t\t\tIt refers to the growth rate (smaller or larger) of said functions.\n\t\tWhat is \u201clittle o\u201d formal definition?\n\n\t\t\tFor all c>0 such that there exists an N such that for all n \u2265 N such that f(n) < cg(n)\n\t\tFor functions f(n) and g(n), what does \u201clittle o\u201d represent?\n\t\t\tf(n) is o(g(n)) if f(n) is slower growing than g(n)\n\t\t\tit makes a robust statement about f, g\n\t\tWhat is \u201c\u03c9\u201d formal definition?\n\n\t\t\tFor all c>0 such that there exists an N such that for all n \u2265 N such that f(n) > Cg(n)\n\t\tFor functions f(n) and g(n), what does \u201c\u03c9\u201d represent?\n\t\t\tf(n) is \u03c9(g(n)) if f(n) is faster growing than g(n)\n\t\tIf f(n) is o(g(n)), is f(n) considered \u201csmall change\u201d is comparison?\n\t\t\tYes as g(n) is faster growing than f(n) and therefor, f(n) is considered \u201csmall change\u201d.\n\tO (big o), \u2126 (big omega), \u0398 (big theta)\n\t\tWhat is \u201cbig o\u201d formal definition?\n\n\t\t\tThere exists a c>0 such that there exists an N such that for all n \u2265 N such that f(n) \u2264 cg(n)\n\t\tFor functions f(n) and g(n), what does \u201cbig o\u201d represent?\n\t\t\tf(n) is no faster growing than g(n)\n\t\t\tIf f is O(g) then g is an asymptotic upper bound for f for some factor c\n\n\t\tWhat is \u201cbig omega \n\t\t\u2126\n\t\t\u201d formal definition?\n\n\t\t\tThere exists a c>0 such that there exists an N such that for all n \u2265 N such that f(n) \u2265  cg(n)\n\t\tFor functions f(n) and g(n), what does \u201cbig omega\u201d represent?\n\t\t\tf grows no slower than g\n\t\t\tIf f is \n\t\t\t then g is an asymptotic lower bound for f for some factor c\n\n\t\tWhat is \u201cbig theta\u201d formal definition?\n\n\t\t\tThere exists c1, c2 >0 such that there exists an N such that for all n \u2265 N such that f(n) \u2208 [c1g(n), c2g(n)]\n\t\tFor functions f(n) and g(n), what does \u201cbig theta \n\t\t\u0398\n\t\t\u201d represent?\n\t\t\tf has essentially the same growth rate as g\n\t\t\tIf f is \n\t\t\t then g is an asymptotic tight bound for f if \n\t\t\t and \n\t\t\t \n\n\tWhat is a Divide-and-Conquer algorithm?\n\t\tIf the problem is big, break it down into smaller ones, and combine the solutions at the end.\n\tGives examples of Divide-and-Conquer algorithms\n\t\tMergeSort\n\t\tQuickSort\n\tWhich data structure does InsertSort prefer and why?\n\t\tLinked list - There are no swaps to perform as such, thereby giving \n\t\t and \n\tWhich data structure does MergeSort prefer and why?\n\t\tGenerally speaking, the MergeSort algorithm performs better on lists of a larger input, which can be both standard or linked.\n\tWhich conditions would trigger a worst-case scenario for QuickSort?\n\t\tif the input is already sorted\n\t\ta bad pivot leads to bad partitioning at every level \u2192 leads to linear summation \n\tWhat are the best, worse cases and space complexity of QuickSort?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "30be1d79-6a60-447a-b3d1-af4a08b29dc3": {"__data__": {"id_": "30be1d79-6a60-447a-b3d1-af4a08b29dc3", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "2": {"node_id": "c0e9dd9b-5b9a-4aa1-a3e6-34ab682c698c", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "257ca7d79812d98f331d6fb2903d8ee5389a0b3a2d3fc07fba12acaa9ce6ffcf"}, "3": {"node_id": "e448afc4-a9bb-449b-ac40-15ca87d1461e", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "8894199af67b8699f87031ed018f403aaa15a29625c19690cfc9f190289c3997"}}, "hash": "0155725fe71eb5af212eda4254c1597295fe867c031161b2b918ba70ba27a485", "text": "Standard list: \n\t\t; Linked list: \n\t\tStandard list: \n\t\t; Linked list: \n\t\t = \n\t\tStandard list: \n\t\t; Linked list: \n\tWhat are the best, worse cases and space complexity of MergeSort?\n\t\tStandard list: \n\t\t; Linked list: \n\t\tStandard list: \n\t\t; Linked list: \n\t\tStandard list: \n\t\t; Linked list: \n\tWhat are the best, worse cases and space complexity of InsertSort?\n\t\tStandard list: \n\t\t; Linked list: \n\t\tStandard list: \n\t\t; Linked list: \n\t\tStandard list: \n\t\t; Linked list: \nLists, Stacks, Queues\n\tFixed-sized Arrays\n\t\tWhat is meant by under-catering an array?\n\t\t\tIt means that the array\u2019s size is too small for the desired content which will lead to an overflow.\n\t\tWhat is meant by over-catering an array?\n\t\t\tIt means that the array\u2019s size is too big for the desired content which will lead an inefficient use of the allocated space.\n\t\tWhat is the runtime cost of length, get, set, append, cons, insert, delete algorithms?\n\t\t\tlength: \n\t\t\tget: \n\t\t\tset: \n\t\t\tappend: \n\t\t\tconstructor: \n\t\t\t*\n\t\t\tinsert: \n\t\t\t*\n\t\t\tdelete: \n\t\t\t*\n\t\t\t*worst case\n\t\tWhat are the pros of fixed sized arrays?\n\t\t\tFast get and set operations (especially if we can keep array on the stack)\n\t\t\tFixed, predictable size which is good for memory management\n\t\tWhat are the cons of fixed sized arrays?\n\t\t\tThey can\u2019t cope with lists longer than the initial pre-set limit\n\t\t\tIf a computation involved many lists of unpredictable sizes, it is very likely that we\u2019ll either under-cater or over-cater\n\tExtensible Arrays\n\t\tWhat is the idea behind extensible arrays?\n\t\t\tLet\u2019s suppose we have an array \n\t\t\t of space \n\t\t\t, if array \n\t\t\t overflows, then replace it by a bigger one of factor \n\t\tWhat will be the cost associated with extending an array if the memory space following it is free?\n\t\t\tThe cost of extending an array \n\t\t\t if the subsequent memory space is available is relatively cheap.\n\t\tWhat happens if the subsequent memory space is not available?\n\t\t\tWe will have to allocate a new array \n\t\t\t of size \n\t\t\t where \n\t\t\t is constant factor and copy the contents of \n\t\t\t into it.\n\t\tWhat is the asymptotic conclusion of appending an element?\n\t\t\tBest case: \n\t\t\tWorse case: \n\t\t\t, n = |A|*c\n\t\tWhat is amortised cost?\n\t\t\tAmortised analysis averages the running times of operations in a sequence over that sequence. It is used when the worst case of an algorithm is too pessimistic.\n\t\t\tFor a given operation, certain situations (e.g., extend an array \n\t\t\t and copy the contents of array \n\t\t\t) may imply a significant cost in resources, whereas other situations may not be as costly (appending a fresh element into \n\t\t\t). \n\t\t\tOne may \u201coverlook\u201d a costly operation if the average of the other operations are relatively cheap to perform - the cost is spread overtime.\n\t\tHow does one calculate the amortised cost?\n\t\t\t with \n\t\t\t being the expansion factor\n\tLinked Lists\n\t\tWhat is the runtime cost of length, get, set, append, cons, insert, delete algorithms?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e448afc4-a9bb-449b-ac40-15ca87d1461e": {"__data__": {"id_": "e448afc4-a9bb-449b-ac40-15ca87d1461e", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "2": {"node_id": "30be1d79-6a60-447a-b3d1-af4a08b29dc3", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "0155725fe71eb5af212eda4254c1597295fe867c031161b2b918ba70ba27a485"}, "3": {"node_id": "0ec41b7b-6c46-4c2d-8d8b-25f28cb5d6eb", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "7133eb2f12ad5d21019aa6da57be47ba0a28b65529158156fceddb8cbc48918b"}}, "hash": "8894199af67b8699f87031ed018f403aaa15a29625c19690cfc9f190289c3997", "text": "get: \n\t\t\t*\n\t\t\tset: \n\t\t\t*\n\t\t\tappend: \n\t\t\t - can be \n\t\t\t best case\n\t\t\tconstructor: \n\t\t\tinsert: \n\t\t\t*\n\t\t\tdelete: \n\t\t\t*\n\t\t\t*worst case\n\tList Implementations: Summary\n\t\tWhat are the advantages of arrays and linked lists when compared with each other?\n\t\t\tArrays\n\t\t\t offer fast \n\t\t\tget\n\t\t\t, \n\t\t\tset\n\t\t\t operations\n\t\t\tLinked Lists\n\t\t\t offer fast \n\t\t\tconstructor\n\t\t\t, \n\t\t\tappend\n\t\t\t operations and insert/delete operations at given position.They can also share their nodes with each other.\n\n\tStacks\n\t\tWhat is the principle behind stacks?\n\t\t\tLast-in-first-out (LIFO)\n\t\t\tNew elements are added at the front of the data structure\n\t\t\tElements are popped from the front\n\t\tWhat are the stack\u2019s possible operations?\n\n\t\tWhat is the key difference between utilising an array vs a linked list as implementation?\n\t\t\tArrays grow from the end\n\t\t\tLinked lists grow from the start\n\n\tQueues\n\t\tWhat is the principle behind queues?\n\t\t\tFirst-in-first-out (FIFO)\n\t\t\tNew elements are added at the end of the data structure\n\t\t\tElements are popped from the front\n\t\tWhat are the queue\u2019s possible operations?\n\n\t\tWhat are the two possible ways of implementing a queue?\n\t\t\tWraparound array buffer (fixed-sized/extensible)\n\t\t\tLinked list with references to first and last cells\n\n\nSets, Dictionaries, Hashing\n\tWhich data structure can be used to implement both sets and dictionaries?\n\t\tAny implementation of the list data structure.\n\t\tWhat a possible downside of these implementations?\n\t\t\t contain/lookup operations which is not ideal\n\t\tWhat is a possible optimisation?\n\t\t\tSort the keys \u2192 binary search algorithm: \n\t\t\t runtime\n\t\t\tinsert\n\t\t\t/\n\t\t\tdelete\n\t\t\t operations are still costly!\n\tSets\n\t\tWhat is the principle behind sets?\n\t\t\tA set contains a finite number of items of a given type \n\t\t\t e.g \n\t\tWhat are the set\u2019s possible operations?\n\n\tDictionaries\n\t\tWhat is the principle behind dictionaries?\n\t\t\tAlso known as \u201clookup tables\u201d, dictionaries map keys of type \n\t\t\t to values of type \n\t\t\t.\n\t\tWhat are the dictionary\u2019s possible operations?\n\n\tHash Tables\n\t\tWhat is the principle behind hash tables?\n\t\t\tGiven a key \n\t\t\t (typically string, integer) and hash function \n\t\t\t, the hash table will compute the location of \n\t\t\t through \n\t\t\t and output the value-pair \n\t\t\tTime complexities\n\t\t\t\tInsert: O(1)\n\t\tWhat is a clash/collision?\n\t\t\tA clash/collision is when at least two keys result in the same hash output\n\t\t\te.g. H(k): k mod 10, H(13|23) \u2192 3\n\t\tWhat causes a clash/collision?\n\t\t\tA hash function that is too simplistic; \n\t\t\tk mod 10\n\t\t\t is a bad hash function as any number ending with the same digit will output the same location i.e., has a high collision rate.\n\t\tWhat to do when a collision arises?\n\t\t\tWhat is the bucket solution?\n\n\t\t\t\tStore a list of entries or bucket for each hash value.\n\t\t\t\tWhat is the load on the hash table?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ec41b7b-6c46-4c2d-8d8b-25f28cb5d6eb": {"__data__": {"id_": "0ec41b7b-6c46-4c2d-8d8b-25f28cb5d6eb", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "2": {"node_id": "e448afc4-a9bb-449b-ac40-15ca87d1461e", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "8894199af67b8699f87031ed018f403aaa15a29625c19690cfc9f190289c3997"}, "3": {"node_id": "bcfb2d59-c9cd-4c9e-9e57-919f14f8636e", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "94bf22cb3b5f77b2dcf4825502a70b8f4fccf3e504907370ed094fa37e7a2116"}}, "hash": "7133eb2f12ad5d21019aa6da57be47ba0a28b65529158156fceddb8cbc48918b", "text": "What is the load on the hash table?\n\t\t\t\t\tLet \n\t\t\t\t\t: # of entries\n\t\t\t\t\t, \n\t\t\t\t\t: size of array\n\t\t\t\t\t, \n\t\t\t\t\t \u21d2 the ratio \n\t\t\t\t\t is called the \n\t\t\t\t\tload on the hash table (\u2264 1 or > 1)\n\t\t\t\tWhat is \u201cexpand-and-rehash\u201d?\n\t\t\t\t\tIf a ratio \n\t\t\t\t\t was decided beforehand, one can \u201cexpand-and-rehash\u201d any time \n\t\t\t\t\t gets too large (re: amortised cost)\n\t\t\t\tWhat is the average number of key comparisons?\n\n\t\t\tWhat is the open addressing and probing solution?\n\t\t\t\tAs opposed to the bucket solution which handles duplicate keys outside the table, \n\t\t\t\topen addressing\n\t\t\t\t handles them within.\n\t\t\t\t\u21d2 hash function takes two parameters \n\t\t\t\t where \n\t\t\t\t is the fist choice of hash value,\n\t\t\t\t is the second choice\n\t\t\t\tComplete example \ud83d\udc40\n\n\t\t\t\tHow would a new element be inserted?\n\t\t\t\t\tTo insert an item \n\t\t\t\t\t with key \n\t\t\t\t\t, probe  \n\t\t\t\t\t, \n\t\t\t\t\t, \u2026 until we find a free slot \n\t\t\t\t\t and put \n\t\t\t\t\t there.\n\t\t\t\tHow would an existing element be looked up?\n\t\t\t\t\tTo lookup an item \n\t\t\t\t\t with key \n\t\t\t\t\t, probe  \n\t\t\t\t\t, \n\t\t\t\t\t, \u2026 until we find a the matching key \n\t\t\t\t\t, or reach a free cell in which case the lookup failed.\n\t\t\t\tWhat are the props of open addressing/probing approach?\n\t\t\t\t\tThe number of probes for insert and lookup stays low until the table is nearly full\n\t\t\t\t\t\u2757No need for pointers: the memory saved can be spent on increasing for the table size and decreasing the load. Hence, when compared with the bucket implementation, the open addressing method will get faster lookup for the same amount of memory.\n\t\t\t\tWhat are the cons of open addressing/probing approach?\n\t\t\t\t\tDeletes are difficult for the probing approach\n\t\t\t\t\tThe design of probing functions is a \u201cdelicate art\u201d\n\t\tWhat makes a good hash function?\n\t\t\tWhen all potential keys are all equally probable.\n\n\t\tWhat is the worse case of a hash function?\n\t\t\tAll the possible keys hash to the same code.\n\t\tWhat is one potential danger of having a weak hashing function?\n\t\t\tAn attacker could guess one\u2019s hash function and mutate one\u2019s data.\n\t\tWhat is Perfect Hashing?\n\t\t\tPerfect hashing is a situation where there are no collisions. In which case, the lookup time would always be \n\t\t\t.\n\t\tWhen is it worth looking into Perfect Hashing?\n\t\t\tWhen the set of possible keys is static i.e., no insert/delete required.\nBalanced Trees\n\tWhat are the characteristics of tree?\n\t\tHas a starting node called the \n\t\troot\n\t\t node\n\t\tEach node has a left and right branch which may be null or point to another (child) node\n\t\tEach node is labelled with a key (e.g. integer, string)\n\t\tWrite \n\t\t for left and right subtrees at \n\t\t which may be empty\n\tWhen is a node called a leaf?\n\t\tWhen a node has no children.\n\tBinary Trees (representing sets)\n\t\tWhat is a perfectly balanced tree?\n\t\t\tA perfectly balanced tree is when all non-leaf nodes have two children, and all leaf nodes are at the same dept \n\t\t\td\n\t\t\tWhen is this possible?\n\n\t\tWhen does a worse case occur?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bcfb2d59-c9cd-4c9e-9e57-919f14f8636e": {"__data__": {"id_": "bcfb2d59-c9cd-4c9e-9e57-919f14f8636e", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "2": {"node_id": "0ec41b7b-6c46-4c2d-8d8b-25f28cb5d6eb", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "7133eb2f12ad5d21019aa6da57be47ba0a28b65529158156fceddb8cbc48918b"}, "3": {"node_id": "fdb51100-ca49-4c60-bc71-82606ebc5c70", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "99231a91abd49f819ac737f68a584cebb63eb921176d1b2fc0d3260e554cef29"}}, "hash": "94bf22cb3b5f77b2dcf4825502a70b8f4fccf3e504907370ed094fa37e7a2116", "text": "When does a worse case occur?\n\t\t\tWhen the tree becomes really unbalanced; all the nodes accumulate along a single path (\n\t\t\t)\n\t\t[pseudocode\ud83d\udee0\ufe0f] Implement \n\t\tcontains/lookup\n\n\t\tWhat will be the \n\t\tcontains\n\t\t average runtime for a perfectly balanced tree?\n\n\t\tWhat will be the \n\t\tcontains\n\t\t average runtime for a fairly balanced tree?\n\n\t\tWhat will be the \n\t\tcontains\n\t\t worse-case runtime?\n\n\t\t[pseudocode\ud83d\udee0\ufe0f] Implement \n\t\tinsert\n\n\t\tWhat will be the \n\t\tinsert\n\t\t average runtime?\n\n\t\tWhat will be the \n\t\tinsert\n\t\t worst-case runtime?\n\t\t\tStill \u0398(n)\n\t\tWhat is the outline of the \n\t\tdelete(j)\n\t\t implementation?\n\t\t\tStart by locating the node \n\t\t\t bearing \n\t\t\t\u2026\n\t\t\tIf \n\t\t\t has no children, we can just delete \n\t\t\tIf \n\t\t\t has one child, we continue traversing through said child\n\t\t\tIf \n\t\t\t has two children:\n\t\t\t\tLocate leftmost node in \n\t\t\t\t\tStarting at \n\t\t\t\t\tTurn right, then left as often as possible\n\t\t\t\t\tThis find the node \n\t\t\t\t\t bearing the smallest key \n\t\t\t\t\t in \n\n\t\t\t\tIf \n\t\t\t\t has a right child, merge with \n\t\t\t\t, otherwise just delete \n\n\t\tWhat will be the \n\t\tdelete\n\t\t average runtime?\n\n\t\tWhat will be the \n\t\tdelete\n\t\t worst-case runtime?\n\n\tRed-black Trees\n\t\tWhy are red-back trees preferred when wanting to represent a balanced tree?\n\t\t\tThey are guaranteed to be fairly balanced meaning that all operations will be handled in \n\t\t\t time as they can be \n\t\t\tre-balanced\n\t\t\t in order to maintain the benefits of operating on a balanced tree.\n\t\tWhen is a re-balancing most likely to occur?\n\t\t\tAfter an \n\t\t\tinsert/delete\n\t\t\t operation.\n\t\tWhat is a red-back tree\u2019s re-balance runtime?\n\t\t\tAlso, \n\t\tWhat are the tree rules of a red-back tree?\n\t\t\t and all \n\t\t\t are black\n\t\t\tAll paths from the \n\t\t\t contain the same number of black nodes \n\t\t\tOn a path \n\t\t\t, never have two reds in a row\n\t\tWhat is the minimum possible path length?\n\n\t\tWhat is the maximum possible path length?\n\n\t\tWhy are red-back trees referred to as fairly balanced / not too unbalanced?\n\t\t\tWe can show \n\t\t\t, so all path lengths \n\t\t\t, so contains works as usual with worst-case time \n\t\t\t.\n\n\t\tWhat is the red-uncle rule?\n\n\n\t\t\tColour-flipping which is fast and doesn\u2019t require any rewiring.\n\t\tWhat is the wandering black rule?\n\n\n\n\t\tWhich colour should the new node be under an insert operation? \n\t\t\tAlways red.\n\t\tWhat happens during an insert operation?\n\t\t\t[see generic tree insert algorithm]\n\t\t\t\u2026We apply the red-uncle rule as often as possible\u2026\n\t\t\t \n\t\t\tThree possible endgame scenarios:\n\t\t\tThe problem is sorted: tree is fairly balanced again\n\t\t\tRed pushed to root\n\t\t\t\tturn it black\n\t\t\t\tadd 1 to all black-lengths\n\t\t\tThere\u2019s a configuration involving a black with 4 nearest black descendants\u2019.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fdb51100-ca49-4c60-bc71-82606ebc5c70": {"__data__": {"id_": "fdb51100-ca49-4c60-bc71-82606ebc5c70", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "2": {"node_id": "bcfb2d59-c9cd-4c9e-9e57-919f14f8636e", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "94bf22cb3b5f77b2dcf4825502a70b8f4fccf3e504907370ed094fa37e7a2116"}, "3": {"node_id": "aa142d03-daca-497e-ad22-14fcb2d620c7", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "f9601f128f6dba51b8a74795b5db897afcef1ef22332065d30f9314db05898b8"}}, "hash": "99231a91abd49f819ac737f68a584cebb63eb921176d1b2fc0d3260e554cef29", "text": "What happens during a delete operation?\n\t\t\t[see generic tree node delete algorithm]\n\t\t\tProblem\n\t\t\t: all paths must have the same black-length, so if \n\t\t\t was black, we want to remove \n\t\t\t but keep the \u201cbackness\u201d.\n\n\t\t\tEasy case\n\t\t\t: Node it haunts is now red \u2192 turn it black\n\t\t\tFinitely many endgame scenarios \n\t\t\t(each fixable in \n\t\t\t time):\n\t\t\tFloating black haunts a red node \u2192 turn it black\n\t\t\tFloating black reaches root \u2192 just remove it\n\t\t\tOther fixable scenario, e.g.\n\n\t\tWhat are some of the applications of red-black trees?\n\t\t\tLinux\u2019s completely fair scheduler\n\t\t\tJava 8 \n\t\t\tHashMap\n\t\t\t class\n\tPros of AVL (self-balancing binary tree) and red-black trees when compared with each other?\n\t\tAVL are \u201cmore balanced\u201d meaning they are better for \n\t\tlookup\n\t\t, whereas red-black trees have faster \n\t\tinsert/delete\n\t\t operations.\nRecurrence Relations \n\n\t\t\twhere f(n) is the worst-case time for the divide and combine phases on inputs of size n.\n\n\n\tHow can we find solutions for a recurrence relation?\n\t\tWhat is the intuition/experience/numerical approach?\n\t\t\tUse intuition/experience and numerical data to \u201cguess\u201d a solution then verify it using induction.\n\n\t\tWhat is the Master Theorem?\n\t\t\tIf the recurrence happens to be in the form\u2026\n\n\t\t\tthen we can utilise the Master Theorem that simply gives us the answer (not impacted by ceiling and floor functions).\n\t\t\tMaster Theorem\n\n\t\t[Complete example\ud83d\udc40] Master Theorem\n\n(Max) Heap, Priority Queues\n\tWhat is a heap?\n\t\tA (max) heap is a nearly complete binary tree which stores items in nodes, where every node is greater than or equal to each of its child nodes.\n\tWhat data structure is typically be used to represent the heap and why?\n\t\tAn array because of the structure\u2019s topology (the heap\u2019s child \u2264 parent property).\n\t[understanding] Heap indexing\n\n\tWhat is the heap data structure said to be an \u201calmost complete binary tree\u201d?\n\t\tAll leaves are either at depth \n\t\t or \n\t\t (height)\n\t\tThe \n\t\t leaves all appear consecutively from left-to-right\n\tWhat is the possible range of nodes for a heap of height \n\t?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aa142d03-daca-497e-ad22-14fcb2d620c7": {"__data__": {"id_": "aa142d03-daca-497e-ad22-14fcb2d620c7", "embedding": null, "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce09a48c-33e1-4c52-9e4d-ed253819c436", "node_type": "4", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "b7d1a35ded33a4f629a7bb7dd0c79acbc87893c915e6560a6966c65c3c135ee1"}, "2": {"node_id": "fdb51100-ca49-4c60-bc71-82606ebc5c70", "node_type": "1", "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}, "hash": "99231a91abd49f819ac737f68a584cebb63eb921176d1b2fc0d3260e554cef29"}}, "hash": "f9601f128f6dba51b8a74795b5db897afcef1ef22332065d30f9314db05898b8", "text": "What are the main operations of a heap?\n\n\t\tHeap-Maximum\n\t\t\tReturns the max element of a heap in \n\t\t\t time.\n\t\tMax-Heapify\n\t\t\tMaintains the max (heap) property in \n\t\t\t whenever some node has violated the heap rule (max: child \u2264 parent).\n\t\tHeap-Extract-Max\n\t\t\tReturns (and delete) the maximum item \n\t\t\t (and maintains the heap property) in \n\t\t\t time.\n\t\tMax-Heap-Insert\n\t\t\tInserts a new item (and maintains the heap property) in \n\t\t\t time.\n\t\tBuild-Max-Heap\n\t\t\tBuilds a heap from an unordered input array in \n\t\t\t.\n\n\tWhat is an application of heaps?\n\t\tPriority queues\n\t\t\tWhat is a priority queue?\n\t\t\t\tA priority a queue (access to resources .e.g, printers) is a data structure for storing collections of elements.\n\t\t\t\tEvery element is associated with a key (of some linear set) such as an integer\n\t\t\t\tKeys represent priority, the biggest key has the highest priority and so on\n\t\t\tWhat are the operations of a priority queue?\n\n\t\t\tWhich data structure can be used to implement a priority queue?\n\t\t\t\tBinary search tree (like a Red-Black tree) has the maximum key is always stored in the rightmost leaf.\n\t\t\t\tStandard R-B tree operations are in \n\t\t\t\t aside from \n\t\t\t\tisEmpty\n\t\t\t\t and \n\t\t\t\tmaxElement*\n\t\t\t\t which complete in \n\t\t\t\t time.\n\t\t\t\t*Balanced trees can be tweaked to include a pointer to the rightmost leaf.\nGraphs\n\tWhat is a graph?\n\t\tA graph is a mathematical structure consisting of a set of vertices connected by a set of vertices.\n\t\tFormally: \n\t\t where \n\t\t is a set and \n\tWhat is the difference between a directed and undirected graph?\n\t\tA graph is set to be \n\t\tundirected\n\t\t if the following holds \n\t\t:", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"ce09a48c-33e1-4c52-9e4d-ed253819c436": {"node_ids": ["c0e9dd9b-5b9a-4aa1-a3e6-34ab682c698c", "30be1d79-6a60-447a-b3d1-af4a08b29dc3", "e448afc4-a9bb-449b-ac40-15ca87d1461e", "0ec41b7b-6c46-4c2d-8d8b-25f28cb5d6eb", "bcfb2d59-c9cd-4c9e-9e57-919f14f8636e", "fdb51100-ca49-4c60-bc71-82606ebc5c70", "aa142d03-daca-497e-ad22-14fcb2d620c7"], "metadata": {"page_id": "ef7ac290-d07a-43d6-b65d-f6f8c426913c"}}}}